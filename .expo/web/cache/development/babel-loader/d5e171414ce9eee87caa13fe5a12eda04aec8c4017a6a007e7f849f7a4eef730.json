{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { TaskContext } from \"../context/TaskContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction AddTaskScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    task = _useState2[0],\n    setTask = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    list = _useState4[0],\n    setList = _useState4[1];\n  var _useContext = useContext(TaskContext),\n    addTask = _useContext.addTask;\n  var AddTask = function AddTask() {\n    if (task.trim() && list.trim() !== '' && (list === '1' || list === '2')) {\n      var randomColor = generateRandomColor();\n      addTask({\n        title: task,\n        color: randomColor,\n        list: parseInt(list)\n      });\n      navigation.navigate('TaskList');\n    } else {\n      alert('Por favor, preencha todos os campos corretamente.');\n    }\n  };\n  var generateRandomColor = function generateRandomColor() {\n    var r = Math.floor(Math.random() * 255);\n    var g = Math.floor(Math.random() * 255);\n    var b = Math.floor(Math.random() * 255);\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n  };\n  return _jsxs(View, {\n    style: styles.root,\n    children: [_jsx(Text, {\n      style: styles.label,\n      children: \"Adicionar Nova Tarefa\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"T\\xEDtulo da Tarefa\",\n      placeholderTextColor: \"white\",\n      value: task,\n      onChangeText: setTask\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholderTextColor: \"white\",\n      placeholder: \"Insira o n\\xFAmero da lista (1 ou 2)\",\n      keyboardType: \"numeric\",\n      value: list,\n      onChangeText: setList\n    }), _jsx(Pressable, {\n      style: styles.button,\n      onPress: AddTask,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"AddTask\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#151515',\n    padding: 20\n  },\n  label: {\n    fontSize: 18,\n    marginBottom: 10,\n    color: 'white'\n  },\n  input: {\n    width: '100%',\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 20,\n    paddingHorizontal: 10,\n    color: 'white'\n  },\n  button: {\n    backgroundColor: '#6200ee',\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 25\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default AddTaskScreen;","map":{"version":3,"names":["React","useState","useContext","View","Text","TextInput","Button","StyleSheet","Pressable","TaskContext","jsx","_jsx","jsxs","_jsxs","AddTaskScreen","_ref","navigation","_useState","_useState2","_slicedToArray","task","setTask","_useState3","_useState4","list","setList","_useContext","addTask","AddTask","trim","randomColor","generateRandomColor","title","color","parseInt","navigate","alert","r","Math","floor","random","g","b","style","styles","root","children","label","input","placeholder","placeholderTextColor","value","onChangeText","keyboardType","button","onPress","buttonText","create","flex","justifyContent","alignItems","backgroundColor","padding","fontSize","marginBottom","width","height","borderColor","borderWidth","paddingHorizontal","paddingVertical","borderRadius","fontWeight"],"sources":["C:/Users/Hygor/Documents/Programas/mobile/tarefas-mobile/src/screens/addTaskScreen.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet, Pressable } from 'react-native';\r\nimport { TaskContext } from '../context/TaskContext';\r\n\r\nfunction AddTaskScreen({ navigation }) {\r\n  const [task, setTask] = useState('');\r\n  const [list, setList] = useState('');\r\n  const { addTask } = useContext(TaskContext);\r\n\r\n  const AddTask = () => {\r\n    if (task.trim() && list.trim() !== '' && (list === '1' || list === '2')) {\r\n      const randomColor = generateRandomColor();\r\n      addTask({ title: task, color: randomColor, list: parseInt(list)});\r\n      navigation.navigate('TaskList');\r\n    } else {\r\n      alert('Por favor, preencha todos os campos corretamente.');\r\n    }\r\n  };\r\n\r\n  const generateRandomColor = () => {\r\n    const r = Math.floor(Math.random() * 255);\r\n    const g = Math.floor(Math.random() * 255);\r\n    const b = Math.floor(Math.random() * 255);\r\n    return `rgb(${r},${g},${b})`;\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n        <Text style={styles.label}>Adicionar Nova Tarefa</Text>\r\n        <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Título da Tarefa\"\r\n        placeholderTextColor=\"white\"\r\n        value={task}\r\n        onChangeText={setTask}\r\n        />\r\n        <TextInput\r\n        style={styles.input}\r\n        placeholderTextColor=\"white\"\r\n        placeholder=\"Insira o número da lista (1 ou 2)\"\r\n        keyboardType=\"numeric\"\r\n        value={list}\r\n        onChangeText={setList}\r\n        />\r\n        <Pressable style={styles.button} onPress={AddTask}>\r\n        <Text style={styles.buttonText}>AddTask</Text>\r\n        </Pressable>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#151515',\r\n    padding: 20,\r\n  },\r\n  label: {\r\n    fontSize: 18,\r\n    marginBottom: 10,\r\n    color: 'white'\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    height: 40,\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 20,\r\n    paddingHorizontal: 10,\r\n    color: 'white',\r\n  },\r\n  button: {\r\n    backgroundColor: '#6200ee',\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 30,\r\n    borderRadius: 25,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default AddTaskScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}