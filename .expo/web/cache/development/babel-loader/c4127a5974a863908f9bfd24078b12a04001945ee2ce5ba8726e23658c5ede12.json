{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { TaskContext } from \"../context/TaskContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width;\nfunction TaskListScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useContext = useContext(TaskContext),\n    tasks = _useContext.tasks;\n  var _useState = useState(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedList = _useState2[0],\n    setSelectedList = _useState2[1];\n  return _jsxs(View, {\n    style: styles.root,\n    children: [_jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(Button, {\n        title: \"Lista 1\",\n        onPress: function onPress() {\n          return setSelectedList(1);\n        },\n        color: selectedList === 1 ? '#6200ee' : '#000'\n      }), _jsx(Button, {\n        title: \"Lista 2\",\n        onPress: function onPress() {\n          return setSelectedList(2);\n        },\n        color: selectedList === 2 ? '#6200ee' : '#000'\n      })]\n    }), _jsx(FlatList, {\n      data: tasks.filter(function (task) {\n        return task.list === selectedList;\n      }),\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(View, {\n          style: [styles.task, {\n            backgroundColor: item.color\n          }],\n          children: _jsx(Text, {\n            children: item.title\n          })\n        });\n      }\n    }), _jsx(Pressable, {\n      style: styles.button,\n      onPress: function onPress() {\n        return navigation.navigate(\"AddTask\");\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"AddTask\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    backgroundColor: '#151515',\n    paddingTop: 20\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginBottom: 20\n  },\n  task: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: width * 0.9,\n    height: 80,\n    borderRadius: 10,\n    elevation: 5,\n    marginVertical: 10\n  },\n  button: {\n    backgroundColor: '#6200ee',\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 25\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default TaskListScreen;","map":{"version":3,"names":["React","useContext","useState","View","Text","StyleSheet","FlatList","Button","Dimensions","Pressable","TaskContext","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","TaskListScreen","_ref","navigation","_useContext","tasks","_useState","_useState2","_slicedToArray","selectedList","setSelectedList","style","styles","root","children","buttonContainer","title","onPress","color","data","filter","task","list","keyExtractor","item","id","toString","renderItem","_ref2","backgroundColor","button","navigate","buttonText","create","flex","justifyContent","alignItems","paddingTop","flexDirection","marginBottom","height","borderRadius","elevation","marginVertical","paddingVertical","paddingHorizontal","fontSize","fontWeight"],"sources":["C:/Users/Hygor/Documents/Programas/mobile/tarefas-mobile/src/screens/TaskListScreen.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { View, Text, StyleSheet, FlatList, Button, Dimensions, Pressable } from 'react-native';\r\nimport { TaskContext } from '../context/TaskContext';\r\nconst { width } = Dimensions.get('window');\r\n\r\nfunction TaskListScreen({ navigation }) {\r\n  const { tasks } = useContext(TaskContext);\r\n  const [selectedList, setSelectedList] = useState(1); \r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <View style={styles.buttonContainer}>\r\n        <Button\r\n          title=\"Lista 1\"\r\n          onPress={() => setSelectedList(1)}\r\n          color={selectedList === 1 ? '#6200ee' : '#000'} \r\n        />\r\n        <Button\r\n          title=\"Lista 2\"\r\n          onPress={() => setSelectedList(2)}\r\n          color={selectedList === 2 ? '#6200ee' : '#000'} \r\n        />\r\n      </View>\r\n      \r\n      <FlatList\r\n        data={tasks.filter(task => task.list === selectedList)} // filtragem\r\n        keyExtractor={(item) => item.id.toString()}\r\n        renderItem={({ item }) => (\r\n          <View style={[styles.task, { backgroundColor: item.color }]}>\r\n            <Text>{item.title}</Text>\r\n          </View>\r\n        )}\r\n      />\r\n      \r\n      <Pressable style={styles.button} onPress={() => navigation.navigate(\"AddTask\")}>\r\n        <Text style={styles.buttonText}>AddTask</Text>\r\n      </Pressable>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'center',\r\n    backgroundColor: '#151515',\r\n    paddingTop: 20,\r\n  },\r\n  buttonContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    marginBottom: 20,\r\n  },\r\n  task: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    width: width * 0.9,\r\n    height: 80,\r\n    borderRadius: 10,\r\n    elevation: 5,\r\n    marginVertical: 10,\r\n  },\r\n  button: {\r\n    backgroundColor: '#6200ee',\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 30,\r\n    borderRadius: 25,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default TaskListScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}